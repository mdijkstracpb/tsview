setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
.tsview.lst.as.ts
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/bvar')
rm(list = ls(all = T)); setwd('~/Dropbox/cpb/git/tsview/bvar')#
library(stringr)#
library(regts)#
library(tsview)#
#
file.name.a = "bvar-2016-11-13.csv"#
file.name.b = "bvar-2017-07-14.csv"#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
a = t(read.csv(file.name.a, row.names = 1, check.names = F))#
b = t(read.csv(file.name.b, row.names = 1, check.names = F))#
rownames(a) = str_replace(rownames(a), "\\.", "")#
rownames(b) = str_replace(rownames(b), "\\.", "")#
#
# make regts#
a = regts(a, start = rownames(a)[1], frequency = 4)#
b = regts(b, start = rownames(b)[1], frequency = 4)#
#
l = list(a, b)#
names(l) = c("2016", "2017")#
#tsplot(l, plot.type="multiple")#, show.version=1:2#
tsview(l, plot.type="multiple")#, show.version=1:2
plot(1:10,axes=F)
axis(1, at = c(2,5), lwd = 0)
axis(1, at = c(2,5), lwd = 0, labels=F)
plot(1:10,axes=F)
axis(1, at = c(2,5), lwd = 0, labels=F)
axis(1, at = c(2,5), lwd = 0, labels=F, lwd.ticks = 1)
axis(1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					mdx <<- x#
					mdi <<- i.index#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		if (missing(ylab)) {#
			ylab <- colnames(x)#
			if (length(ylab) != 1L)#
				ylab <- xlabel#
		}#
		if (is.matrix(x)) {#
			k <- ncol(x)#
			tx <- time(x)#
			xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
			xy$x <- tx#
		}#
		else xy <- xy.coords(x, NULL, log = log)#
		if (is.null(xlim))#
			xlim <- range(xy$x)#
		if (is.null(ylim))#
			ylim <- range(xy$y[is.finite(xy$y)])#
#
		par.mar.previous = par()$mar#
		par(mar = mar.single)#
		plot.new()#
		plot.window(xlim, ylim, log, ...)#
		if (is.matrix(x)) {#
			for (i in seq_len(k))#
			{#
				print('daaro??')#
				lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
			}#
		}#
		else#
		{#
			print('hiero??')#
			lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		}#
		if (show.main && ann)#
			title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			if (!all(x.at == round(x.at)))#
			{#
				index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (0 == length(index))#
				{#
					axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
					axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
				}#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	xlabel <- if (!missing(x))#
		deparse(substitute(x))#
	ylabel <- if (!missing(y))#
		deparse(substitute(y))#
#
	tsview_plot_internal(x = x, y = y, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = xlabel,#
										ylabel = ylabel, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
tsview_plot(lst, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					mdx <<- x#
					mdi <<- i.index#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		if (missing(ylab)) {#
			ylab <- colnames(x)#
			if (length(ylab) != 1L)#
				ylab <- xlabel#
		}#
		if (is.matrix(x)) {#
			k <- ncol(x)#
			tx <- time(x)#
			xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
			xy$x <- tx#
		}#
		else xy <- xy.coords(x, NULL, log = log)#
		if (is.null(xlim))#
			xlim <- range(xy$x)#
		if (is.null(ylim))#
			ylim <- range(xy$y[is.finite(xy$y)])#
#
		par.mar.previous = par()$mar#
		par(mar = mar.single)#
		plot.new()#
		plot.window(xlim, ylim, log, ...)#
		if (is.matrix(x)) {#
			for (i in seq_len(k))#
			{#
				print('daaro??')#
				lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
			}#
		}#
		else#
		{#
			print('hiero??')#
			lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		}#
		if (show.main && ann)#
			title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			if (!all(x.at == round(x.at)))#
			{#
				index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (0 == length(index))#
				{#
					axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
					axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
				}#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	xlabel <- if (!missing(x))#
		deparse(substitute(x))#
	ylabel <- if (!missing(y))#
		deparse(substitute(y))#
#
	tsview_plot_internal(x = x, y = y, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = xlabel,#
										ylabel = ylabel, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(lst, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					mdx <<- x#
					mdi <<- i.index#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		if (missing(ylab)) {#
			ylab <- colnames(x)#
			if (length(ylab) != 1L)#
				ylab <- xlabel#
		}#
		if (is.matrix(x)) {#
			k <- ncol(x)#
			tx <- time(x)#
			xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
			xy$x <- tx#
		}#
		else xy <- xy.coords(x, NULL, log = log)#
		if (is.null(xlim))#
			xlim <- range(xy$x)#
		if (is.null(ylim))#
			ylim <- range(xy$y[is.finite(xy$y)])#
#
		par.mar.previous = par()$mar#
		par(mar = mar.single)#
		plot.new()#
		plot.window(xlim, ylim, log, ...)#
		if (is.matrix(x)) {#
			for (i in seq_len(k))#
			{#
				print('daaro??')#
				lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
			}#
		}#
		else#
		{#
			print('hiero??')#
			lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		}#
		if (show.main && ann)#
			title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			if (!all(x.at == round(x.at)))#
			{#
				index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (0 == length(index))#
				{#
					axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
					axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
				}#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	xlabel <- if (!missing(x))#
		deparse(substitute(x))#
	ylabel <- if (!missing(y))#
		deparse(substitute(y))#
#
	tsview_plot_internal(x = x, y = y, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = xlabel,#
										ylabel = ylabel, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(l, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					mdx <<- x#
					mdi <<- i.index#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		if (missing(ylab)) {#
			ylab <- colnames(x)#
			if (length(ylab) != 1L)#
				ylab <- xlabel#
		}#
		if (is.matrix(x)) {#
			k <- ncol(x)#
			tx <- time(x)#
			xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
			xy$x <- tx#
		}#
		else xy <- xy.coords(x, NULL, log = log)#
		if (is.null(xlim))#
			xlim <- range(xy$x)#
		if (is.null(ylim))#
			ylim <- range(xy$y[is.finite(xy$y)])#
#
		par.mar.previous = par()$mar#
		par(mar = mar.single)#
		plot.new()#
		plot.window(xlim, ylim, log, ...)#
		if (is.matrix(x)) {#
			for (i in seq_len(k))#
			{#
				print('daaro??')#
				lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
			}#
		}#
		else#
		{#
			print('hiero??')#
			lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		}#
		if (show.main && ann)#
			title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			if (!all(x.at == round(x.at)))#
			{#
				index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (0 == length(index))#
				{#
					axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
					axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
				}#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# xlabel <- if (!missing(x))#
	# 	deparse(substitute(x))#
	# ylabel <- if (!missing(y))#
	# 	deparse(substitute(y))#
#
	tsview_plot_internal(x = x, y = y, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = xlabel,#
										ylabel = ylabel, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(l, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					mdx <<- x#
					mdi <<- i.index#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		if (missing(ylab)) {#
			ylab <- colnames(x)#
			if (length(ylab) != 1L)#
				ylab <- xlabel#
		}#
		if (is.matrix(x)) {#
			k <- ncol(x)#
			tx <- time(x)#
			xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
			xy$x <- tx#
		}#
		else xy <- xy.coords(x, NULL, log = log)#
		if (is.null(xlim))#
			xlim <- range(xy$x)#
		if (is.null(ylim))#
			ylim <- range(xy$y[is.finite(xy$y)])#
#
		par.mar.previous = par()$mar#
		par(mar = mar.single)#
		plot.new()#
		plot.window(xlim, ylim, log, ...)#
		if (is.matrix(x)) {#
			for (i in seq_len(k))#
			{#
				print('daaro??')#
				lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
			}#
		}#
		else#
		{#
			print('hiero??')#
			lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		}#
		if (show.main && ann)#
			title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			if (!all(x.at == round(x.at)))#
			{#
				index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (0 == length(index))#
				{#
					axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
					axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
				}#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# xlabel <- if (!missing(x))#
	# 	deparse(substitute(x))#
	# ylabel <- if (!missing(y))#
	# 	deparse(substitute(y))#
#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = xlabel,#
										ylabel = ylabel, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(l, plot.type = "multiple")
missing
missing(a)
a
missing(adfa)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					mdx <<- x#
					mdi <<- i.index#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		if (missing(ylab)) {#
			ylab <- colnames(x)#
			if (length(ylab) != 1L)#
				ylab <- xlabel#
		}#
		if (is.matrix(x)) {#
			k <- ncol(x)#
			tx <- time(x)#
			xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
			xy$x <- tx#
		}#
		else xy <- xy.coords(x, NULL, log = log)#
		if (is.null(xlim))#
			xlim <- range(xy$x)#
		if (is.null(ylim))#
			ylim <- range(xy$y[is.finite(xy$y)])#
#
		par.mar.previous = par()$mar#
		par(mar = mar.single)#
		plot.new()#
		plot.window(xlim, ylim, log, ...)#
		if (is.matrix(x)) {#
			for (i in seq_len(k))#
			{#
				print('daaro??')#
				lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
			}#
		}#
		else#
		{#
			print('hiero??')#
			lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		}#
		if (show.main && ann)#
			title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			if (!all(x.at == round(x.at)))#
			{#
				index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (0 == length(index))#
				{#
					axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
					axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
				}#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# xlabel <- if (!missing(x))#
	# 	deparse(substitute(x))#
	# ylabel <- if (!missing(y))#
	# 	deparse(substitute(y))#
#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(l, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					mdx <<- x#
					mdi <<- i.index#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		if (missing(ylab)) {#
			ylab <- colnames(x)#
			if (length(ylab) != 1L)#
				ylab <- xlabel#
		}#
		if (is.matrix(x)) {#
			k <- ncol(x)#
			tx <- time(x)#
			xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
			xy$x <- tx#
		}#
		else xy <- xy.coords(x, NULL, log = log)#
		if (is.null(xlim))#
			xlim <- range(xy$x)#
		if (is.null(ylim))#
			ylim <- range(xy$y[is.finite(xy$y)])#
#
		par.mar.previous = par()$mar#
		par(mar = mar.single)#
		plot.new()#
		plot.window(xlim, ylim, log, ...)#
		if (is.matrix(x)) {#
			for (i in seq_len(k))#
			{#
				print('daaro??')#
				lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
			}#
		}#
		else#
		{#
			print('hiero??')#
			lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		}#
		if (show.main && ann)#
			title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			if (!all(x.at == round(x.at)))#
			{#
				index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (0 == length(index))#
				{#
					axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
					axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
				}#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# xlabel <- if (!missing(x))#
	# 	deparse(substitute(x))#
	# ylabel <- if (!missing(y))#
	# 	deparse(substitute(y))#
#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		if (missing(ylab)) {#
			ylab <- colnames(x)#
			if (length(ylab) != 1L)#
				ylab <- xlabel#
		}#
		if (is.matrix(x)) {#
			k <- ncol(x)#
			tx <- time(x)#
			xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
			xy$x <- tx#
		}#
		else xy <- xy.coords(x, NULL, log = log)#
		if (is.null(xlim))#
			xlim <- range(xy$x)#
		if (is.null(ylim))#
			ylim <- range(xy$y[is.finite(xy$y)])#
#
		par.mar.previous = par()$mar#
		par(mar = mar.single)#
		plot.new()#
		plot.window(xlim, ylim, log, ...)#
		if (is.matrix(x)) {#
			for (i in seq_len(k))#
			{#
				lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
			}#
		}#
		else#
		{#
			lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		}#
		if (show.main && ann)#
			title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# xlabel <- if (!missing(x))#
	# 	deparse(substitute(x))#
	# ylabel <- if (!missing(y))#
	# 	deparse(substitute(y))#
#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			}#
			# else#
			# {#
			# 	y.min = 0#
			# 	y.max = 1#
			# 	plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
			# }#
		}		#
		# if (missing(ylab)) {#
		# 	ylab <- colnames(x)#
		# 	if (length(ylab) != 1L)#
		# 		ylab <- xlabel#
		# }#
		# if (is.matrix(x)) {#
		# 	k <- ncol(x)#
		# 	tx <- time(x)#
		# 	xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
		# 	xy$x <- tx#
		# }#
		# else xy <- xy.coords(x, NULL, log = log)#
		# if (is.null(xlim))#
		# 	xlim <- range(xy$x)#
		# if (is.null(ylim))#
		# 	ylim <- range(xy$y[is.finite(xy$y)])#
		##
		# par.mar.previous = par()$mar#
		# par(mar = mar.single)#
		# plot.new()#
		# plot.window(xlim, ylim, log, ...)#
		# if (is.matrix(x)) {#
		# 	for (i in seq_len(k))#
		# 	{#
		# 		lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
		# 	}#
		# }#
		# else#
		# {#
		# 	lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		# }#
		# if (show.main && ann)#
		# 	title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# xlabel <- if (!missing(x))#
	# 	deparse(substitute(x))#
	# ylabel <- if (!missing(y))#
	# 	deparse(substitute(y))#
#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			}#
			# else#
			# {#
			# 	y.min = 0#
			# 	y.max = 1#
			# 	plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
			# }#
		}#
		# if (missing(ylab)) {#
		# 	ylab <- colnames(x)#
		# 	if (length(ylab) != 1L)#
		# 		ylab <- xlabel#
		# }#
		# if (is.matrix(x)) {#
		# 	k <- ncol(x)#
		# 	tx <- time(x)#
		# 	xy <- xy.coords(x = matrix(rep.int(tx, k), ncol = k), y = x, log = log)#
		# 	xy$x <- tx#
		# }#
		# else xy <- xy.coords(x, NULL, log = log)#
		# if (is.null(xlim))#
		# 	xlim <- range(xy$x)#
		# if (is.null(ylim))#
		# 	ylim <- range(xy$y[is.finite(xy$y)])#
		##
		# par.mar.previous = par()$mar#
		# par(mar = mar.single)#
		# plot.new()#
		# plot.window(xlim, ylim, log, ...)#
		# if (is.matrix(x)) {#
		# 	for (i in seq_len(k))#
		# 	{#
		# 		lines.default(xy$x, x[, i], col = ts.col[(i - 1L)%%length(ts.col) + 1L], lty = lty, lwd = lwd[(i - 1L)%%length(lwd) + 1L], bg = bg[(i - 1L)%%length(bg) + 1L], pch = pch[(i - 1L)%%length(pch) + 1L], cex = cex[(i - 1L)%%length(cex) + 1L], type = type) #ts.lty[(i - 1L)%%length(ts.lty) + 1L]#
		# 	}#
		# }#
		# else#
		# {#
		# 	lines.default(xy$x, x, col = ts.col[1L], bg = bg, lty = ts.lty[1L], lwd = lwd[1L], pch = pch[1L], cex = cex[1L], type = type)#
		# }#
		# if (show.main && ann)#
		# 	title(main = main, xlab = xlab, ylab = ylab, ...)#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# xlabel <- if (!missing(x))#
	# 	deparse(substitute(x))#
	# ylabel <- if (!missing(y))#
	# 	deparse(substitute(y))#
#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
# x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
# l = list(a = x, b = x + 1)#
# source('ts-helper.R')#
# .install.if.not.installed = function(x) 1#
# #tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal <- function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# xlabel <- if (!missing(x))#
	# 	deparse(substitute(x))#
	# ylabel <- if (!missing(y))#
	# 	deparse(substitute(y))#
#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
# x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
# l = list(a = x, b = x + 1)#
# source('ts-helper.R')#
# .install.if.not.installed = function(x) 1#
# #tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
	# 									xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
	# 									ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
# x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
# l = list(a = x, b = x + 1)#
# source('ts-helper.R')#
# .install.if.not.installed = function(x) 1#
# #tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	# tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
	# 									xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
	# 									ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
# x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
# l = list(a = x, b = x + 1)#
# source('ts-helper.R')#
# .install.if.not.installed = function(x) 1#
# #tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
# x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
# l = list(a = x, b = x + 1)#
# source('ts-helper.R')#
# .install.if.not.installed = function(x) 1#
# #tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		par(mar = par.mar.previous) # set old settings back#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		#par(mar = par.mar.previous) # set old settings back#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						if (!all(x.at == floor(x.at)))#
						{#
							# now we want Q's everywhere			#
							index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
							if (0 < length(index)) x.label	= prettyTime(x.at)#
							if (length(index) < 2)#
							{#
							 	x.at	= as.vector(time(x))#
								x.label = prettyTime(x.at)#
								# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
							}#
							else#
							{#
								x.at	= x.at[index]#
								x.label	= x.label[index]#
								# add extra ticks for quarters#
								x.ticks = as.vector(time(x))#
								x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
								if (0 < length(x.ticks.extra))#
								{#
									axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
								}#
							}#
							axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
						}#
						else#
						{ # normal x-axis (ie no Q's):#
							axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
						}#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		#par(mar = par.mar.previous) # set old settings back#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")#
tsview_plot(l, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	plot.x.axis = function()#
	{#
		x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
		if (!all(x.at == floor(x.at)))#
		{#
			# now we want Q's everywhere			#
			index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			if (0 < length(index)) x.label	= prettyTime(x.at)#
			if (length(index) < 2)#
			{#
			 	x.at	= as.vector(time(x))#
				x.label = prettyTime(x.at)#
				# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			}#
			else#
			{#
				x.at	= x.at[index]#
				x.label	= x.label[index]#
				# add extra ticks for quarters#
				x.ticks = as.vector(time(x))#
				x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
				if (0 < length(x.ticks.extra))#
				{#
					axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
				}#
			}#
			axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
		}#
		else#
		{ # normal x-axis (ie no Q's):#
			axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
		}#
	}#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		#par(mar = par.mar.previous) # set old settings back#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")#
tsview_plot(l, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		#par(mar = par.mar.previous) # set old settings back#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")#
tsview_plot(l, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		#par(mar = par.mar.previous) # set old settings back#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single")#
tsview_plot(l, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			##
			## Code below adds Q's (for quarters) at right place#
			##
			# TODO remove hardcoding (should work only with quarter data..):#
			# x.at = axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			##
			# if (!all(x.at == round(x.at)))#
			# {#
			# 	index = which((x.at - round(x.at)) %in% (0:4 / 4)[1:4]) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
			# 	if (0 < length(index)) x.label	= prettyTime(x.at)#
			# 	if (0 == length(index))#
			# 	{#
			# 		axis(1, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
			# 	}#
			# 	else#
			# 	{#
			# 		x.at	= x.at[index]#
			# 		x.label	= x.label[index]#
			# 		axis(1, at = x.at, labels = x.label, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# 	}#
			# }#
			# else#
			# { # normal x-axis (ie no Q's):#
			# 	axis(1, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			# }#
#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
		#par(mar = par.mar.previous) # set old settings back#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single")#
# tsview_plot(l, plot.type = "multiple")
l
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single", show.names = 'a')#
# tsview_plot(l, plot.type = "multiple")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "multiple", show.names = 'a'))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "multiple", show.names = 'a')
l
names(l)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "multiple", show.names = 1)
tsview(l)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "multiple", show.names = c("a","b"))
l
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "multiple", show.names = c("Series 1"))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "multiple", show.names = paste("Series", 1:3))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:2))
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:5))
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
which(letters[1:3] %in% c(letters[1:4],letters[1:2]))
which(c(letters[1:4],letters[1:2]) %in% letters[1:3])
c(letters[1:4],letters[1:2])
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
par()
par(par())
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 8, 1, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 3, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 1#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 1#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
plot(1:10)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	legend.name.cex	= 1#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = legend.name.cex, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = legend.name.cex, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 2,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 2,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
				print(cex.axis)#
#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1, cex.axis=2)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
axis.cex
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			print(cex.axis)#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			print(cex.axis)#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1, cex.axis=2)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			print(cex.axis)#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			print(cex.axis)#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1, cex.axis=1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = 1.5, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			print(cex.axis)#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1, cex.axis=2)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			print(cex.axis)#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			print(cex.axis)#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
 tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 2)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
# tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= rainbow(n.show.names)#RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= rainbow(n.show.names)#RColorBrewer::brewer.pal(12, "Paired")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(l, plot.type = "multiple")#
tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
rainbow(6)
palette(rainbow(6))
?palette
plot(1:10)
plot(1:10,col=2)
plot(1:10,col=1:10)
plot(1:7, col = brewer.pal(7, "BrBG"))
plot(1:7, col = RColorBrewer::brewer.pal(7, "BrBG"))
plot(1:7, col = RColorBrewer::brewer.pal(7, "BrBG"),cex=3)
plot(1:7, col = RColorBrewer::brewer.pal(7, "BrBG"),cex=3,pch=19)
library(RColorBrewer)#
n <- 60#
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]#
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))#
pie(rep(1,n), col=sample(col_vector, n))
col_vector
n = 7
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
col_vector
pie(rep(1,n), col=sample(col_vector, n))
qual_col_pals
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Set3")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
qual_col_pals
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Pastel1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
qual_col_pals
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(9, "Pastel1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
library(RColorBrewer)#
n <- 60#
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]#
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))#
pie(rep(1,n), col=sample(col_vector, n))
n=10
pie(rep(1,n), col=sample(col_vector, n))
n=8
pie(rep(1,n), col=sample(col_vector, n))
n=10
pie(rep(1,n), col=sample(col_vector, n))
n=12
pie(rep(1,n), col=sample(col_vector, n))
pie(rep(1,n), col=sample(col_vector, n))
col_vector
pie(rep(1,n), col=col_vector[1:n])
qual_col_pals
n = 28
pie(rep(1,n), col=col_vector[1:n])
n = 12
pie(rep(1,n), col=col_vector[c(9,2:6,10,17)])
n
n = 40
pie(rep(1,n), col=col_vector[1:n])
n = 22
pie(rep(1,n), col=col_vector[1:n])
pie(rep(1,n), col=col_vector[c(9,2:6,10,14,17,21)])
length(c(9,2:6,10,14,17,21))
pie(rep(1,n), col=col_vector[c(9,2:6,10,14,17,21,22,23)])
n=12
pie(rep(1,n), col=col_vector[c(9,2:6,10,14,17,21,22,23)])
length(c(9,2:6,10,14,17,21,22,23))
plot(1:10,col="aquamarine")
pie(rep(1,n), col=col_vector[c(9,2:6,10,14,17,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,21,10,14,17,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,22,10,14,17,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,10,14,17,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14,14,17,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14)])
pie(rep(1,n), col=col_vector[c(9,2:6,10,14,17,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14)])
pie(rep(1,n), col=col_vector[c(9,2:6,10,14,17,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14,10,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14,10,23,22,21)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14,10,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14,22,21,10,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14,10,21,22,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14,22,21,10,23)])
pie(rep(1,n), col=col_vector[c(9,2:6,17,14,22,"gray80",21,10,23)])
col_vector[c(9,2:6,17,14,22,21,10,23)]
col
d
d = c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "#E31A1C", "#FB9A99", "#D95F02", "#FDBF6F")
pie(rep(1,n), col=d)
d = c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "#FB9A99", "#D95F02", "#FDBF6F")
pie(rep(1,n), col=d)
d = c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1","#FB9A99", "#D95F02", "#FDBF6F")
pie(rep(1,n), col=d)
d = c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1", "#FB9A99", "#D95F02", "#FDBF6F")
pie(rep(1,n), col=d)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
plot(1:10,cex=5,pch=19)
plot(1:10,cex=5,pch=19,col=1:10)
plot(1:10,cex=5,pch=19,col=c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1"))
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names] # c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names] # c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1), text.size = 1)
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names] # c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:2), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names] # c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names] # c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
#tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names] # c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
# tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
lst
setwd('~/Dropbox/cpb/git/tsview/bvar')#
library(stringr)#
library(regts)#
library(tsview)#
#
file.name.a = "bvar-2016-11-13.csv"#
file.name.b = "bvar-2017-07-14.csv"#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
a = t(read.csv(file.name.a, row.names = 1, check.names = F))#
b = t(read.csv(file.name.b, row.names = 1, check.names = F))#
rownames(a) = str_replace(rownames(a), "\\.", "")#
rownames(b) = str_replace(rownames(b), "\\.", "")#
#
# make regts#
a = regts(a, start = rownames(a)[1], frequency = 4)#
b = regts(b, start = rownames(b)[1], frequency = 4)#
#
l = list(a, b)#
names(l) = c("2016", "2017")#
#tsplot(l, plot.type="multiple")#, show.version=1:2#
tsview(l, plot.type="multiple")#, show.version=1:2
tsplot(l, plot.type="multiple")
tsplot(l, plot.type="single")
setwd('/Users/mdijkstra/Dropbox/cpb/git/tsview/R')
#' @importFrom grDevices dev.flush dev.hold xy.coords#
#' @importFrom graphics axis box legend lines lines.default mtext par plot.default plot.new plot.window text title#
#' @importFrom stats as.ts hasTsp is.ts rnorm time ts ts.intersect tsp#
#
tsview_plot = function (x, plot.type = c("multiple", "single"), show.names = NULL, show.versions = NULL, lwd = 3, time.range = NA, text.size = 1,#
											xy.labels, xy.lines, panel = lines, nc, yax.flip = FALSE,#
											mar.multi = c(0, 5.1, 0, if (yax.flip) 5.1 else 2.1),#
											oma.multi = c(6, 0, 5, 0), cex.axis = text.size, axes = TRUE, frame.plot = FALSE, ...)#
{#
	#.install.if.not.installed("RColorBrewer")#
#
	if (!is.list(x)) x = list(x)#
	stopifnot(length(x) < 10)#
#
	n.versions	= length(x)#
	x			= .tsview.lst.as.ts(lst = x)#
	x.names		= unique( .tsview.get.ts.names(x) )#
#
	# fill show.* if NULL#
	if (is.null(show.names)) show.names = x.names#
	if (is.null(show.versions)) show.versions = 1:n.versions#
#
	n.show.names		= length(show.names)#
	#n.show.versions	= length(show.versions)#
#
	# zoom x-axis if not NA#
	if (!all(is.na(time.range)))#
	{#
		x = suppressWarnings(window(x, start = c(time.range[1],1), end = c(time.range[2],4)))#
	}#
#
	# Our settings#
	#legend.name.cex	= 2#
	n.dots.show.below = 10#
#
	# Create legend#
	#x.legend  = if (1 == x.n) "Time series" else colnames(x)#
	#if (is.null(colnames(x))) x.legend = paste("Series", 1:x.n)#
#
	show.xlab			= F#
	axis.col			= "gray50"#
	#axis.cex			= 2#
	axis.x.padj			= .5#
	show.main			= F#
	ts.col				= c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#RColorBrewer::brewer.pal(12, "Paired")[1+1:n.show.names] # c("#1B9E77", "#BEAED4", "#FDC086", "#FFFF99", "#386CB0", "#F0027F", "#A6CEE3", "#E6AB02", "gray80", "#E31A1C", "mediumorchid1", "seagreen1")[1:n.show.names]#
	name.col			= if (plot.type == "multiple") rep(axis.col, n.show.names) else ts.col#
	#ts.lty				= 1:x.n # lty == show.versions#
	mar.single			= c(2.5, 6, 0, 15)#
	mar.multiple		= c(2.5, 6, 0, 15)#
	legend.single.shift	= .9#
#
	tsview_plot_internal = function(x, plot.type = c("multiple", "single"), xy.labels, xy.lines, panel = lines, nc, xlabel,#
										ylabel, type = "l", xlim = NULL, ylim = NULL, xlab = "Time",#
										ylab, log = "", col = par("col"), bg = NA, pch = par("pch"),#
										cex = par("cex"), lty = par("lty"), lwd = par("lwd"),#
										axes = TRUE, frame.plot = axes, ann = par("ann"), cex.lab = par("cex.lab"),#
										col.lab = par("col.lab"), font.lab = par("font.lab"),#
										cex.axis = par("cex.axis"), col.axis = par("col.axis"),#
										font.axis = par("font.axis"), main = NULL, ...) {#
#
		plot.x.axis = function()#
		{#
			x.at = axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			if (!all(x.at == floor(x.at)))#
			{#
				# now we want Q's everywhere			#
				index = which((x.at - floor(x.at)) %in% (0:3 / 4)) # only select .0, .25, .5, .75 to display (in format yearQ{1,2,3,4})#
				if (0 < length(index)) x.label	= prettyTime(x.at)#
				if (length(index) < 2)#
				{#
				 	x.at	= as.vector(time(x))#
					x.label = prettyTime(x.at)#
					# axis(1, xpd = NA, lwd = 0, labels = NA, cex.axis = axis.cex, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis, ...)#
				}#
				else#
				{#
					x.at	= x.at[index]#
					x.label	= x.label[index]#
#
					# add extra ticks for quarters#
					x.ticks = as.vector(time(x))#
					x.ticks.extra = x.ticks[which(!is.element(x.ticks, x.at) & x.ticks <= max(x.at) & min(x.at) < x.ticks)]#
					if (0 < length(x.ticks.extra))#
					{#
						axis(1, at = x.ticks.extra, labels = F, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, lwd = 0, lwd.ticks = 1, ...)#
					}#
				}#
				axis(1, at = x.at, labels = x.label, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
			else#
			{ # normal x-axis (ie no Q's):#
				axis(1, xpd = NA, cex.axis = cex.axis, col.axis = axis.col, col = axis.col, padj = axis.x.padj, font.axis = font.axis, ...)#
			}#
		}#
#
		plot.type <- match.arg(plot.type)#
		#nser <- NCOL(x) # seems redundant to me#
#
		# Determine whether we want to show dots#
		n.dots = nrow(as.matrix(x))#
		if ("l" == type && n.dots < n.dots.show.below) type = 'b'#
#
		##
		## Here starts plot.type == "multiple"#
		##
		if (plot.type == "multiple" && 1 < n.show.names) {#
			addmain = function(main, cex.main = par("cex.main"), font.main = par("font.main"), col.main = par("col.main"), ...)#
			{#
				mtext(main, side = 3, line = 3, cex = cex.main, font = font.main, col = col.main, ...)#
			}#
#
			panel <- match.fun(panel)#
			#nser <- NCOL(x)#
#
			if (10 < n.show.names)#
				stop("cannot plot more than 10 series as \"multiple\"")#
			if (is.null(main))#
				main <- xlabel#
			if (missing(nc)) nc = if (4 < n.show.names) 2 else 1#
			nr <- ceiling(n.show.names/nc)#
			oldpar <- par(mar = mar.multi, oma = oma.multi, mfcol = c(nr, nc))#
			on.exit(par(oldpar))#
#
			for (i in 1L:n.show.names) {#
				# now show all versions of i in same plot#
				i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
				valid.y.values	= !all(is.na(x[,i.index]))#
				if (valid.y.values)#
				{#
					i.ylim		= range(x[, i.index], na.rm = T) # keep y-axis same if user (de)selects versions#
					i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
					# PLOT MULTIPLE:#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = i.ylim, ...)#
					for (j in 1:length(i.index))#
					{#
						# plot only if we want to show this version#
						if (is.element(i.version[j], show.versions))#
						{#
							panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
						}#
					}#
				}#
				else#
				{#
					y.min = 0#
					y.max = 1#
					plot.default(x, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = c(y.min, y.max), ...)#
				}#
				if (frame.plot)#
					box(...)#
				y.side <- if (i%%2 || !yax.flip)#
					2#
				else 4#
				do.xax <- i%%nr == 0 || i == n.show.names#
				if (axes) {#
					if (valid.y.values)#
					{#
						y.labels = axis(y.side, lwd=0,labels=NA)#
						y.min = y.labels[1]#
						y.max = y.labels[length(y.labels)]						#
					}#
					# axis(y.side, at = y.min, hadj = -1, xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					axis(y.side, at = c(y.min, y.max), padj = c(0, 1), xpd = NA, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					# axis(y.side, at = c(y.min, y.max), xpd = NA, cex.axis = axis.cex, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
					if (do.xax)#
					{#
						##
						## Code below adds Q's (for quarters) at right place#
						##
						# TODO remove hardcoding (should only work in quarter data..):#
						plot.x.axis()#
					}#
				}#
#
				if (ann) {#
					legend("topright", x.names[i], cex = text.size, text.col = name.col[i], text.font = 3, bty = "n")#
					#mtext(nm[i], y.side, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...) # MD: no longer outside#
					if (show.xlab && do.xax) mtext(xlab, side = 1, line = 3, cex = cex.lab, col = col.lab, font = font.lab, ...)#
				}				#
			}#
			if (show.main && ann && !is.null(main)) {#
				par(mfcol = c(1, 1))#
				addmain(main, ...)#
			}#
			return(invisible())#
		}#
#
		##
		## MD: here starts plot.type == "single"#
		##
		x.single		= x[, .tsview.get.index.from.name(x, show.names)]#
		x.single.ylim	= range(x.single, na.rm = T)#
		par(mar = mar.single)#
		plot.default(x.single, axes = FALSE, xlab = "", ylab = "", log = log, col = col, bg = bg, pch = pch, ann = ann, type = "n", ylim = x.single.ylim, ...)#
		# add individual lines of versions#
		for (i in 1L:n.show.names) {#
			# now show all versions of i in same plot#
			i.index			= .tsview.get.index.from.name(x, show.names[i]) # for these ts names we want to plot#
			# valid.y.values	= !all(is.na(x[,i.index]))#
			# if (valid.y.values)#
			# {#
				i.version	= .tsview.get.version.from.index(x, i.index) # these versions we have#
#
				# PLOT MULTIPLE:#
				for (j in 1:length(i.index))#
				{#
					# plot only if we want to show this version#
					if (is.element(i.version[j], show.versions))#
					{#
						panel(x[, i.index[j]], col = .darker.col(ts.col[i], i.version[j], n.versions) , bg = bg, pch = pch, cex = cex, lwd = .smaller.lwd(lwd, i.version[j], n.versions), lty = lty, type = type, ...) # lty = i.version[j]#
					}#
				}#
			#}#
		}#
		if (axes) {#
			plot.x.axis()#
			axis(2, cex.axis = cex.axis, col.axis = axis.col, font.axis = font.axis, col = axis.col, las = 2, ...)#
		}#
		if (frame.plot)#
			box(...)#
#
		legend("topleft", legend = show.names, inset=c(legend.single.shift,0), xpd = T, box.lwd = 0, cex = text.size, text.col = name.col, text.font = 3, col = ts.col, lty = lty, lwd = rep(lwd, n.show.names))#
#
	}#
	tsview_plot_internal(x = x, plot.type = plot.type, lwd = lwd, xy.labels = xy.labels, cex.axis = cex.axis,#
										xy.lines = xy.lines, panel = panel, nc = nc, xlabel = NULL,#
										ylabel = NULL, axes = axes, frame.plot = frame.plot, ...)#
}#
#
x = ts(matrix(rnorm(150), 30, 5), start = c(1961, 1), frequency = 4)#
l = list(a = x, b = x + 1)#
source('ts-helper.R')#
.install.if.not.installed = function(x) 1#
tsview_plot(l, plot.type = "multiple")#
# tsview_plot(l, plot.type = "single", show.names = 'a')#
# tsview_plot(l, plot.type = "single", show.names = paste("Series", 1:3), text.size = 1)
tsplot(l, plot.type="single")
tsplot
tsplot()
tsplot(plot.type="single")
tsview_plot
q()
